// <auto-generated />
using System;
using MYGUYY.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MYGUYY.Migrations
{
    [DbContext(typeof(MYGUYYContext))]
    [Migration("20250117132651_comebacka")]
    partial class comebacka
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MYGUYY.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("TaskRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskRequestId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MYGUYY.Models.Stop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("TaskRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskRequestId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("MYGUYY.Models.TaskRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<double?>("DriverLatitude")
                        .HasColumnType("float");

                    b.Property<double?>("DriverLongitude")
                        .HasColumnType("float");

                    b.Property<double>("DropoffLatitude")
                        .HasColumnType("float");

                    b.Property<double>("DropoffLongitude")
                        .HasColumnType("float");

                    b.Property<double>("PickupLatitude")
                        .HasColumnType("float");

                    b.Property<double>("PickupLongitude")
                        .HasColumnType("float");

                    b.Property<double>("RecommendedCost")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DriverId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("TaskRequests");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MYGUYY.Models.Message", b =>
                {
                    b.HasOne("MYGUYY.Models.TaskRequest", "TaskRequest")
                        .WithMany()
                        .HasForeignKey("TaskRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TaskRequest");
                });

            modelBuilder.Entity("MYGUYY.Models.Stop", b =>
                {
                    b.HasOne("MYGUYY.Models.TaskRequest", "TaskRequest")
                        .WithMany("Stops")
                        .HasForeignKey("TaskRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskRequest");
                });

            modelBuilder.Entity("MYGUYY.Models.TaskRequest", b =>
                {
                    b.HasOne("User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("User", null)
                        .WithMany("ClientTasks")
                        .HasForeignKey("UserId");

                    b.HasOne("User", null)
                        .WithMany("DriverTasks")
                        .HasForeignKey("UserId1");

                    b.Navigation("Client");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("MYGUYY.Models.TaskRequest", b =>
                {
                    b.Navigation("Stops");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("ClientTasks");

                    b.Navigation("DriverTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
