@model IEnumerable<MYGUYY.Models.TaskRequest>
@{
    ViewData["Title"] = "Client Tasks";
}

<h2>Client Tasks</h2>

@if (ViewBag.TaskSummaries != null)
{
    <div class="task-summary">
        <h4>Task Summary:</h4>
        <ul>
            <li>Total Tasks: @ViewBag.TaskSummaries.Total</li>
            <li>Pending Tasks: @ViewBag.TaskSummaries.Pending</li>
            <li>Accepted Tasks: @ViewBag.TaskSummaries.Accepted</li>
            <li>Completed Tasks: @ViewBag.TaskSummaries.Completed</li>
            <li>Declined Tasks: @ViewBag.TaskSummaries.Declined</li>
        </ul>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>Description</th>
            <th>Status</th>
            <th>Created At</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var task in Model)
        {
            <tr>
                <td>@task.Description</td>
                <td>@task.Status</td>
                <td>@task.CreatedAt.ToString("MM/dd/yyyy HH:mm")</td>
                <td>
                    @if (task.Status == "Pending")
                    {
                        <a href="@Url.Action("SendMessageForClient", "Account", new { taskId = task.Id })" class="btn btn-primary">Send Message</a>
                    }
                    else if (task.Status == "Accepted")
                    {
                        <a href="@Url.Action("ViewMessages", "Account", new { taskId = task.Id })" class="btn btn-secondary">View Messages</a>
                    }
                    else
                    {
                        <span class="badge badge-secondary">No Action</span>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<h3>Map View</h3>

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />

<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>

<div id="map" style="height: 500px; width: 100%;"></div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const map = L.map('map').setView([-25.7479, 28.2293], 13); // Default to Pretoria

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        let driverMarker = null;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/locationHub")
            .build();

        document.getElementById("startTracking")?.addEventListener("click", async () => {
            const taskId = document.getElementById("taskId").value;
            if (!taskId) {
                alert("Please enter a Task ID.");
                return;
            }

            await connection.start();
            await connection.invoke("JoinTaskGroup", taskId);

            // Fetch task details (pickup and dropoff locations)
            fetch(`/Task/GetTaskDetails/${taskId}`)
                .then(response => response.json())
                .then(task => {
                    if (task) {
                        if (task.pickupLatitude && task.pickupLongitude) {
                            L.marker([task.pickupLatitude, task.pickupLongitude]).addTo(map)
                                .bindPopup('Pickup Location: ' + task.pickupLocation)
                                .openPopup();
                        }

                        if (task.dropoffLatitude && task.dropoffLongitude) {
                            L.marker([task.dropoffLatitude, task.dropoffLongitude]).addTo(map)
                                .bindPopup('Dropoff Location: ' + task.dropoffLocation)
                                .openPopup();
                        }

                        map.fitBounds([
                            [task.pickupLatitude, task.pickupLongitude],
                            [task.dropoffLatitude, task.dropoffLongitude]
                        ]);
                    }
                })
                .catch(err => alert("Failed to fetch task details: " + err.message));

            connection.on("ReceiveDriverLocation", (location) => {
                const { Latitude, Longitude } = location;

                if (!driverMarker) {
                    driverMarker = L.marker([Latitude, Longitude], {
                        icon: L.icon({
                            iconUrl: 'https://cdn-icons-png.flaticon.com/512/1048/1048312.png',
                            iconSize: [25, 40],
                            iconAnchor: [12, 40]
                        })
                    }).addTo(map)
                        .bindPopup('Driver Location');
                } else {
                    driverMarker.setLatLng([Latitude, Longitude]);
                }

                map.setView([Latitude, Longitude]);
            });

            alert("Tracking started!");
        });
    });
</script>

<!-- Styles for better appearance -->
<style>
    #map {
        height: 500px;
        width: 100%;
        border: 1px solid #ccc;
    }

    button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
    }

        button:hover {
            background-color: #45a049;
        }
</style>
