@model IEnumerable<MYGUYY.Models.TaskRequest>
@{
    ViewData["Title"] = "Client Tasks";
    var taskRequests = Model.OrderByDescending(t => t.CreatedAt).ToList();
    var recentTask = taskRequests.FirstOrDefault();
}

<h2>Client Tasks</h2>

@if (recentTask != null)
{
    <div class="alert alert-success text-center font-weight-bold" style="font-size: 25px; color:white; text-transform: uppercase; letter-spacing: 2px;">
        Your Task Has Been Successfully Submitted!<br />
        <span style="font-size: 20px;">PLEASE WAIT, WE ARE NOW SEARCHING FOR YOUR GUY.</span>
    </div>

    <div class="task-details border p-3 mb-3" data-task-id="@recentTask.Id">
        <h4>Task Details:</h4>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Attribute</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><strong>Description:</strong></td>
                    <td id="taskDescription">@recentTask.Description</td>
                </tr>

                <!-- Language Selection -->
                <tr>
                    <td><strong>Translate To:</strong></td>
                    <td>
                        <select id="targetLanguage" class="mt-2 p-2 bg-gray-700 text-black rounded-md">
                            <option value="en">English</option>
                            <option value="fr">French</option>
                            <option value="es">Spanish</option>
                            <option value="zh-CN">Chinese</option>
                        </select>

                        <!-- Translate Button -->
                        <button type="button" onclick="translateTaskDescription()" class="px-4 py-2 bg-blue-500 text-black rounded-md">
                            Translate
                        </button>
                    </td>
                </tr>

                <!-- Google Translate Script -->
                <script>
                    function translateTaskDescription() {
                        var text = document.getElementById("taskDescription").innerText;
                        var targetLang = document.getElementById("targetLanguage").value; // Get selected language

                        var url = "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=" + targetLang + "&dt=t&q=" + encodeURI(text);

                        fetch(url)
                            .then(response => response.json())
                            .then(data => {
                                document.getElementById("taskDescription").innerText = data[0][0][0]; // Update text with translation
                            })
                            .catch(error => console.error("Translation Error:", error));
                    }
                </script>
                <tr>
                    <td><strong>Status:</strong></td>
                    <td>
                        <span id="taskStatus" class="text-uppercase font-weight-bold @(@recentTask.Status == "Accepted" ? "text-success" : "text-danger")">
                            @recentTask.Status
                        </span>
                        <span id="spinnerContainer"></span> <!-- Spinner will appear here -->
                    </td>
                </tr>

                <script>
                    document.addEventListener("DOMContentLoaded", function () {
                        let spinnerContainer = document.getElementById("spinnerContainer");

                        function createSpinner() {
                            let spinner = document.createElement("span");
                            spinner.id = "spinner";
                            spinner.style.display = "inline-block";
                            spinner.style.width = "15px";
                            spinner.style.height = "15px";
                            spinner.style.border = "3px solid rgba(0, 0, 0, 0.2)";
                            spinner.style.borderTop = "3px solid black";
                            spinner.style.borderRadius = "50%";
                            spinner.style.marginLeft = "10px";

                            return spinner;
                        }

                        function updateSpinner() {
                            let taskStatus = document.getElementById("taskStatus").innerText.trim();
                            let existingSpinner = document.getElementById("spinner");

                            if (taskStatus === "PENDING") { // Check uppercase "PENDING"
                                if (!existingSpinner) {
                                    let spinner = createSpinner();
                                    spinnerContainer.appendChild(spinner);
                                    animateSpinner(spinner); // Start animation
                                }
                            } else {
                                if (existingSpinner) {
                                    existingSpinner.remove();
                                }
                            }
                        }

                        function animateSpinner(spinner) {
                            let angle = 0;
                            function rotate() {
                                if (document.getElementById("spinner")) {
                                    angle += 10;
                                    spinner.style.transform = `rotate(${angle}deg)`;
                                    requestAnimationFrame(rotate);
                                }
                            }
                            rotate();
                        }

                        updateSpinner(); // Run on page load
                        setInterval(updateSpinner, 2000); // Check status every 2 seconds
                    });
                </script>


                <tr>
                    <td><strong>Vehicle Type:</strong></td>
                    <td>@recentTask.VehicleType</td>
                </tr>
                <tr>
                    <td><strong>Cost:</strong></td>
                    <td id="recommendedCostDisplay" data-cost="@recentTask.RecommendedCost">
                        R @recentTask.RecommendedCost.ToString("F2")
                    </td>
                </tr>
                <tr>
                    <td><strong>Pickup Location:</strong></td>
                    <td><span class="pickup-location" data-lat="@recentTask.PickupLatitude" data-lng="@recentTask.PickupLongitude">Loading...</span></td>
                    <td><img id="pickupMap" src="" alt="Pickup Location" style="width: 200px; height: 150px;" /></td>
                </tr>
                <tr>
                    <td><strong>Dropoff Location:</strong></td>
                    <td><span class="dropoff-location" data-lat="@recentTask.DropoffLatitude" data-lng="@recentTask.DropoffLongitude">Loading...</span></td>
                    <td><img id="dropoffMap" src="" alt="Dropoff Location" style="width: 200px; height: 150px;" /></td>
                </tr>
                <tr>
                    <td><strong>Created At:</strong></td>
                    <td>@recentTask.CreatedAt.ToString("MM/dd/yyyy HH:mm")</td>
                </tr>
                <tr>
                    <td><strong>Agreement Code:</strong></td>
                    <td>@recentTask.ConfirmationCode</td>
                </tr>

                @if (recentTask.Status == "Accepted" && recentTask.Driver != null)
                {
                    <tr>
                        <td><strong>Driver Name:</strong></td>
                        <td>@recentTask.Driver.Username</td>
                    </tr>
                    <tr>
                        <td><strong>Driver Email:</strong></td>
                        <td>@recentTask.Driver.Email</td>
                    </tr>
                    <tr>
                        <td><strong>Driver Vehicle Type:</strong></td>
                        
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@if (recentTask != null && recentTask.Status == "Accepted")
{
    <div class="alert alert-info text-center font-weight-bold">
        TASK ACCEPTED BY DRIVER!<br />

        @if (recentTask.Driver != null)
        {
            <span>Driver Details: <strong>@recentTask.Driver.Username</strong> (@recentTask.Driver.Email)</span>
        }
        else
        {
            <span class="text-danger">Driver details unavailable.</span>
        }

        <div class="mt-2">
         
            <a href="@Url.Action("ViewMessages", "Account", new { taskId = recentTask.Id })" class="btn btn-secondary">View Messages</a>
            <a href="@Url.Action("Directions", "Account", new { id = recentTask.Id })" class="btn btn-primary btn-sm">View Directions</a>
        </div>

        <!-- View Directions button -->
        <a href="@Url.Action("Directions", "Account", new { taskId = recentTask.Id })" class="btn btn-primary mt-3">TRACK MY DRIVER</a>
    </div>
}


@if (recentTask == null)
{
    <p>No task found.</p>
}

<!-- Button to show task history -->
<button id="toggleHistory" class="btn btn-primary">Show Previous Tasks</button>

<!-- Task history section -->
<div id="taskHistory" class="d-none mt-4">
    <h4>Past Task Requests:</h4>
    <table class="table table-striped table-hover shadow-sm">
        <thead class="thead-dark">
            <tr>
                <th>Description</th>
                <th>Status</th>
                <th>Vehicle Type</th>
                <th>Recommended Cost</th>
                <th>Client</th>
                <th>Pickup Location</th>
                <th>Dropoff Location</th>
                <th>Stops</th>
                <th>Created At</th>
                <th>Agreement Code</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in taskRequests.Skip(1))
            {
                <tr class="@(task.Status == "Accepted" ? "table-success" : "table-warning")">
                    <td>@task.Description</td>
                    <td class="text-uppercase font-weight-bold @(@task.Status == "Accepted" ? "text-success" : "text-danger")">@task.Status</td>
                    <td>@task.VehicleType</td>
                    <td id="recommendedCostDisplay"
                        data-cost="@recentTask.RecommendedCost">
                        R @recentTask.RecommendedCost.ToString("F2")
                    </td>
                    <td>@task.Client?.Username ?? "Unknown"</td>
                    <td><span class="pickup-location" data-lat="@task.PickupLatitude" data-lng="@task.PickupLongitude">Loading...</span></td>
                    <td><span class="dropoff-location" data-lat="@task.DropoffLatitude" data-lng="@task.DropoffLongitude">Loading...</span></td>
                    <td>
                        @if (task.Stops != null && task.Stops.Count > 0)
                        {
                            <ul>
                                @foreach (var stop in task.Stops)
                                {
                                    <li>@stop.Latitude, @stop.Longitude</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <span>No Stops</span>
                        }
                    </td>
                    <td>@task.CreatedAt.ToString("MM/dd/yyyy HH:mm")</td>
                    <td>@task.ConfirmationCode</td>
                    <td>
                        @if (task.Status == "Pending")
                        {
                            <a href="@Url.Action("SendMessageForClient", "Account", new { taskId = task.Id })" class="btn btn-primary">Send Message</a>
                        }
                        else if (task.Status == "Accepted")
                        {
                            <a href="@Url.Action("ViewMessages", "Account", new { taskId = task.Id })" class="btn btn-secondary">View Messages</a>

                            @if (task.DriverId != null)
                            {
                                <a href="@Url.Action("Directions", "Account", new { id = recentTask.Id })" class="btn btn-primary btn-sm">View Directions</a>
                            }
                            else
                            {
                                <span class="badge badge-warning">Driver Not Assigned</span>
                            }
                        }
                        else
                        {
                            <span class="badge badge-secondary">No Action</span>
                        }
                        @if (recentTask.Driver != null)
                        {
                            <p>Driver Found: @recentTask.Driver.Username</p>
                        }
                        else
                        {
                            <p>Driver details not available</p>
                        }

                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    const rates = { bike: 10, car: 20, van: 30 };
    let map, directionsService, directionsRenderer, pickupMarker, dropoffMarker, stopMarkers = [];

    function calculateCost() {
        // Get the cost value from the element attribute
        var costElement = document.getElementById('recommendedCostDisplay');
        var cost = parseFloat(costElement.getAttribute('data-cost')) || 0;

        // Update the display with the exact cost from the database
        costElement.innerHTML = `R ${cost.toFixed(2)}`;
    }

    // Toggle the task history visibility
    document.getElementById("toggleHistory").addEventListener("click", function () {
        var historySection = document.getElementById("taskHistory");
        historySection.classList.toggle("d-none");
        this.textContent = historySection.classList.contains("d-none") ? "Show Previous Tasks" : "Hide Previous Tasks";
    });

    function reverseGeocode(lat, lng, element, mapElement) {
        if (isNaN(lat) || isNaN(lng)) {
            element.textContent = "Invalid coordinates";
            return;
        }
        element.textContent = "Loading...";

        const googleMapsAPIUrl = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=AIzaSyBx_0EotM86ynL6i5HcHB6LsZOAWQIUpJM`;

        fetch(googleMapsAPIUrl)
            .then(response => response.json())
            .then(data => {
                if (data.results.length > 0) {
                    element.textContent = data.results[0].formatted_address;
                } else {
                    element.textContent = "Address not found";
                }
                const staticMapUrl = `https://maps.googleapis.com/maps/api/staticmap?center=${lat},${lng}&zoom=15&size=400x300&markers=${lat},${lng}&key=AIzaSyBx_0EotM86ynL6i5HcHB6LsZOAWQIUpJM`;
                mapElement.src = staticMapUrl;
            })
            .catch(error => {
                console.error("Error fetching address:", error);
                element.textContent = "Error fetching address";
            });
    }

    document.addEventListener("DOMContentLoaded", function () {
        const pickupLocation = document.querySelector('.pickup-location');
        const dropoffLocation = document.querySelector('.dropoff-location');

        if (pickupLocation && dropoffLocation) {
            const pickupLat = pickupLocation.dataset.lat;
            const pickupLng = pickupLocation.dataset.lng;
            const dropoffLat = dropoffLocation.dataset.lat;
            const dropoffLng = dropoffLocation.dataset.lng;

            reverseGeocode(pickupLat, pickupLng, pickupLocation, document.getElementById('pickupMap'));
            reverseGeocode(dropoffLat, dropoffLng, dropoffLocation, document.getElementById('dropoffMap'));
        }
    });
</script>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/signalr/5.0.8/signalr.min.js"></script>
    <script>
        // Establish a connection to SignalR
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/taskHub")
            .build();

        // Listen for task updates
        connection.on("ReceiveTaskUpdate", (taskId, status) => {
            // Find the task row by taskId and update the status
            const taskRow = document.querySelector(`#task-${taskId}`);
            if (taskRow) {
                const statusCell = taskRow.querySelector(".task-status");
                statusCell.textContent = status;
                statusCell.className = `task-status text-uppercase font-weight-bold ${status === "Accepted" ? "text-success" : "text-danger"}`;
            }
        });

        // Start the SignalR connection
        connection.start().catch(err => console.error(err.toString()));
    </script>
}

<style>
    body {
        background-color: #f7f7f7; /* Light gray background */
        font-family: Arial, sans-serif;
        color: #333; /* Dark gray for text */
    }


    .alert {
        background-color: rgba(0, 0, 0, 0.7); /* Dark background with transparency */
        color: white;
        border: none;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 5px;
        text-align: center;
    }

    .task-details {
        background-color: rgba(0, 0, 0, 0.7); /* Dark transparent background */
        padding: 20px;
        border-radius: 8px;
        color: white;
        margin-bottom: 20px;
    }

        .task-details h4 {
            margin-bottom: 15px;
        }

    .table-bordered {
        background-color: #fff; /* White background for the table */
        color: #333; /* Dark gray text */
        border: 1px solid #ddd;
        width: 100%; /* Full width of the container */
        table-layout: auto; /* Automatically adjust the table width */
    }

        .table-bordered th, .table-bordered td {
            padding: 12px;
            text-align: left;
        }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f2f2f2; /* Light gray for odd rows */
    }

    .table-hover tbody tr:hover {
        background-color: #ddd; /* Hover effect */
    }

    #taskHistory {
        background-color: rgba(0, 0, 0, 0.5); /* Dark transparent background */
        padding: 20px;
        border-radius: 8px;
        color: white;
        margin-bottom: 20px;
        width: 100%;
        overflow-x: auto; /* Allow horizontal scroll if needed */
    }

    #toggleHistory {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        #toggleHistory:hover {
            background-color: #0056b3;
        }

   

    {
        padding: 15px;
    }

    .task-details h4 {
        font-size: 1.2rem;
    }

    .table-bordered th, .table-bordered td {
        font-size: 0.9rem;
        padding: 8px;
    }

    #toggleHistory {
        font-size: 0.9rem;
        padding: 8px 15px;
    }

    /* Adjust table layout for mobile */
    .table-bordered {
        width: auto; /* Allow table to shrink to fit the content */
        table-layout: fixed; /* Fix column width to fit on screen */
    }

    /* Limit table width on mobile */
    #taskHistory {
        width: auto;
        margin-left: auto;
        margin-right: auto;
    }

    }
</style>