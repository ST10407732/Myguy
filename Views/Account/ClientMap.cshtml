<!-- Include Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />

<!-- Create the Map Container -->
<div id="map" style="height: 500px; width: 100%;"></div>

<!-- Form to submit the task with pickup and dropoff locations -->
<form id="taskForm" method="post" asp-action="CreateTask">
    <input type="hidden" id="PickupLatitude" name="PickupLatitude" />
    <input type="hidden" id="PickupLongitude" name="PickupLongitude" />
    <input type="hidden" id="DropoffLatitude" name="DropoffLatitude" />
    <input type="hidden" id="DropoffLongitude" name="DropoffLongitude" />

    <div>
        <label for="Description">Description:</label>
        <input type="text" id="Description" name="Description" />
    </div>

    <button type="submit">Create Task</button>
</form>

<!-- Include Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
<!-- Include Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Initialize the map with a default center
        var map = L.map('map').setView([-29.8587, 31.0218], 13); // Default: Durban, South Africa

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        // Variables to hold markers and addresses
        var pickupMarker = null;
        var dropoffMarker = null;

        // Function to fetch address using Nominatim API
        function fetchAddress(lat, lng, callback) {
            fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`)
                .then(response => response.json())
                .then(data => {
                    if (data && data.display_name) {
                        callback(data.display_name);
                    } else {
                        callback("Address not found");
                    }
                })
                .catch(() => callback("Error fetching address"));
        }

        // Handle map clicks to set pickup/dropoff locations
        map.on('click', function (e) {
            var lat = e.latlng.lat;
            var lng = e.latlng.lng;

            // Set pickup location
            if (!pickupMarker) {
                fetchAddress(lat, lng, function (address) {
                    pickupMarker = L.marker([lat, lng]).addTo(map)
                        .bindPopup(`Pick-up location: ${address}`)
                        .openPopup();

                    // Store coordinates and address in hidden fields
                    document.getElementById("PickupLatitude").value = lat;
                    document.getElementById("PickupLongitude").value = lng;
                    document.getElementById("PickupAddress").value = address;

                    console.log("Pickup Address:", address); // Debugging
                });
            }
            // Set dropoff location
            else if (!dropoffMarker) {
                fetchAddress(lat, lng, function (address) {
                    dropoffMarker = L.marker([lat, lng]).addTo(map)
                        .bindPopup(`Drop-off location: ${address}`)
                        .openPopup();

                    // Store coordinates and address in hidden fields
                    document.getElementById("DropoffLatitude").value = lat;
                    document.getElementById("DropoffLongitude").value = lng;
                    document.getElementById("DropoffAddress").value = address;

                    console.log("Dropoff Address:", address); // Debugging
                });
            }
        });
    });
</script>
