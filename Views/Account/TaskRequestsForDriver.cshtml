@model IEnumerable<MYGUYY.Models.TaskRequest>

@{
    ViewData["Title"] = "Task Requests for Driver";
}

<div class="container mt-4">
    <h2 class="text-primary mb-4">@ViewData["Title"]</h2>

    <div id="notificationArea" class="mb-4">
    </div>

    <div class="task-list mb-4">
        <h4 class="font-weight-bold">Recent Task Requests</h4>

        @{
            var notifications = ViewBag.Notifications as List<MYGUYY.Models.Notification>;
            var recentTasks = Model.Where(t => t.Status == "Pending" || t.Status == "Accepted");
            var historicalTasks = Model.Where(t => t.Status == "Completed" || t.Status == "Cancelled");
        }

        @if (notifications != null && notifications.Any())
        {
            <p>Notifications Count: @notifications.Count</p>

            <ul>
                @foreach (var notification in notifications)
                {
                    <li>
                        @notification.Message - <span class="text-muted">@notification.CreatedAt.ToString("g")</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-warning">No notifications available.</p>
        }

        @if (!recentTasks.Any())
        {
            <p class="text-muted">No pending or accepted task requests.</p>
        }
        else
        {
            <table class="table table-striped table-hover shadow-sm">
                <thead class="thead-dark">
                    <tr>
                        <th>Description</th>
                        <th>Client</th>
                        <th>Pickup Location</th>
                        <th>Dropoff Location</th>
                        <th>Status</th>
                        <th>Vehicle Type</th>
                        <th>Recommended Cost</th>
                        <th>Cashup Amount</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in recentTasks)
                    {
                        <tr>
                            <td>@task.Description</td>
                            <td>@task.Client?.Username</td>
                            <td>
                                <span class="pickup-address text-muted">Loading...</span>
                                <script>
                                    reverseGeocodeLeaflet(@task.PickupLatitude, @task.PickupLongitude, '.pickup-address');
                                </script>
                            </td>
                            <td>
                                <span class="dropoff-address text-muted">Loading...</span>
                                <script>
                                    reverseGeocodeLeaflet(@task.DropoffLatitude, @task.DropoffLongitude, '.dropoff-address');
                                </script>
                            </td>
                            <td>@task.Status</td>
                            <td>@task.VehicleType</td>
                            <td>R@(@task.RecommendedCost.ToString("F2"))</td>
                            <td>R@((@task.RecommendedCost * 0.05).ToString("F2"))</td> <!-- Cashup Amount Calculation -->
                            <td>
                                @if (task.Status == "Pending")
                                {
                                    <div class="btn-group">
                                        <form method="post" action="@Url.Action("AcceptTask", new { id = task.Id })">
                                            <button type="submit" class="btn btn-success btn-sm">Accept</button>
                                        </form>
                                        <form method="post" action="@Url.Action("DeclineTask", new { id = task.Id })">
                                            <button type="submit" class="btn btn-danger btn-sm">Decline</button>
                                        </form>
                                    </div>
                                }
                                else if (task.Status == "Accepted")
                                {
                                    <span class="badge badge-success">Task Accepted</span>
                                }
                                <div class="mt-2">
                                    <a href="@Url.Action("ViewMessagesForDriver", "Account", new { taskId = task.Id })" class="btn btn-info btn-sm">View Messages</a>
                                    <a href="@Url.Action("SendMessageForDriver", "Account", new { taskId = task.Id })" class="btn btn-primary btn-sm">Send Message</a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <button id="toggleHistoryBtn" class="btn btn-secondary mt-3" onclick="toggleHistory()">Show History</button>

        <div id="historySection" style="display:none;">
            <h4 class="font-weight-bold mt-4">Task History</h4>

            @if (!historicalTasks.Any())
            {
                <p class="text-muted">No task history available.</p>
            }
            else
            {
                <table class="table table-striped table-hover shadow-sm">
                    <thead class="thead-dark">
                        <tr>
                            <th>Description</th>
                            <th>Client</th>
                            <th>Pickup Location</th>
                            <th>Dropoff Location</th>
                            <th>Status</th>
                            <th>Vehicle Type</th>
                            <th>Recommended Cost</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var task in historicalTasks)
                        {
                            <tr>
                                <td>@task.Description</td>
                                <td>@task.Client?.Username</td>
                                <td>
                                    <span class="pickup-address text-muted">Loading...</span>
                                    <script>
                                        reverseGeocodeLeaflet(@task.PickupLatitude, @task.PickupLongitude, '.pickup-address');
                                    </script>
                                </td>
                                <td>
                                    <span class="dropoff-address text-muted">Loading...</span>
                                    <script>
                                        reverseGeocodeLeaflet(@task.DropoffLatitude, @task.DropoffLongitude, '.dropoff-address');
                                    </script>
                                </td>
                                <td>@task.Status</td>
                                <td>@task.VehicleType</td>
                                <td>R@(@task.RecommendedCost.ToString("F2"))</td>
                                <td>
                                    <a href="@Url.Action("ViewMessagesForDriver", "Account", new { taskId = task.Id })" class="btn btn-info btn-sm">View Messages</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

    <div id="taskMap" style="height: 400px; width: 100%; display: none; border: 1px solid #ddd; border-radius: 8px;" class="shadow-sm mt-4"></div>
</div>

<!-- Add the Toast container for notifications -->
<div id="toastContainer"></div>

<!-- Leaflet and custom script for showing locations -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.0/signalr.min.js"></script>

<script>
    // SignalR connection and map logic

    // Establish a connection to the SignalR hub
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub") // Ensure this matches the hub's URL
        .build();

    // Start the connection
    connection.start()
        .then(() => console.log("SignalR connected"))
        .catch(err => console.error("SignalR connection failed: ", err));

    // Listen for notifications
    connection.on("ReceiveNotification", function(message) {
        // Display the notification using a Toast message
        showToastNotification(message);
    });

    function showToastNotification(message) {
        const toastContainer = document.getElementById('toastContainer');
        const toast = document.createElement('div');
        toast.classList.add('toast');
        toast.textContent = message;
        toastContainer.appendChild(toast);

        setTimeout(() => {
            toast.remove();
        }, 5000);
    }

    let map;
    let marker = null;

    function reverseGeocodeLeaflet(lat, lng, selector) {
        if (!lat || !lng) {
            document.querySelector(selector).textContent = "No location available";
            return;
        }

        const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data && data.display_name) {
                    document.querySelector(selector).textContent = data.display_name;
                } else {
                    document.querySelector(selector).textContent = "Address not found";
                }
            })
            .catch(error => {
                console.error("Error fetching address:", error);
                document.querySelector(selector).textContent = "Error fetching address";
            });
    }

    function showLocationOnMap(latitude, longitude, locationType) {
        if (!map) {
            map = L.map('taskMap').setView([latitude, longitude], 13);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
        }

        if (marker) {
            map.removeLayer(marker);
        }

        marker = L.marker([latitude, longitude]).addTo(map)
            .bindPopup(`${locationType} Location: Loading address...`)
            .openPopup();

        // Fetch and display the address
        const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data && data.display_name) {
                    marker.bindPopup(`${locationType} Location: ${data.display_name}`).openPopup();
                } else {
                    marker.bindPopup(`${locationType} Location: Address not found`).openPopup();
                }
            })
            .catch(error => {
                console.error("Error fetching address:", error);
                marker.bindPopup(`${locationType} Location: Error fetching address`).openPopup();
            });

        map.setView([latitude, longitude], 13);
        document.getElementById('taskMap').style.display = 'block';
    }

    function toggleHistory() {
        const historySection = document.getElementById('historySection');
        const toggleBtn = document.getElementById('toggleHistoryBtn');

        if (historySection.style.display === 'none') {
            historySection.style.display = 'block';
            toggleBtn.textContent = 'Hide History';
        } else {
            historySection.style.display = 'none';
            toggleBtn.textContent = 'Show History';
        }
    }
</script>

<style>
    .table {
        margin-top: 20px;
        border-collapse: separate;
        border-spacing: 0;
        width: 100%;
    }

        .table thead th {
            background-color: #343a40;
            color: white;
            border-bottom: 2px solid #dee2e6;
        }

        .table tbody tr:hover {
            background-color: #f8f9fa;
        }

    .task-list {
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #fff;
    }

    .btn-group form {
        display: inline;
    }

    #taskMap {
        margin-top: 20px;
    }

    a.text-primary {
        text-decoration: underline;
        cursor: pointer;
    }

    .toast {
        background-color: #28a745;
        color: white;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        font-size: 14px;
    }
</style>
