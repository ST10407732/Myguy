@{
    ViewBag.Title = "Driver Task Tracking";
    var taskId = ViewBag.TaskId; // Get the taskId dynamically, passed from the controller
}

<div class="container mt-4">
    <h2 class="text-primary mb-4">@ViewBag.Title</h2>

    <!-- Error Messages -->
    <div id="errorContainer" class="alert alert-danger d-none" role="alert">
        <span id="errorMessage"></span>
    </div>

    <!-- Map Container -->
    <div id="map" style="height: 500px; width: 100%;"></div>

    <!-- Tracking Controls -->
    <div class="mt-4">
        <button class="btn btn-danger" id="stopTracking" style="display: none;">Stop Tracking</button>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBx_0EotM86ynL6i5HcHB6LsZOAWQIUpJM&libraries=places,directions&callback=initMap" async defer></script>

<script>
    let map, directionsService, directionsRenderer, driverMarker, clientMarker;
    let taskId = @Html.Raw(Json.Serialize(ViewBag.TaskId));

    document.addEventListener("DOMContentLoaded", function () {
        // Initialize Google Maps
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 52.52, lng: 13.4050 }, // Default view (Berlin)
            zoom: 13
        });

        // Initialize the Directions service and renderer
        directionsService = new google.maps.DirectionsService();
        directionsRenderer = new google.maps.DirectionsRenderer({ map: map });

        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/locationHub")
            .build();

        connection.start()
            .then(() => {
                console.log('SignalR connection established');
                connection.invoke("JoinTaskGroup", taskId) // Join the task group for this specific task
                    .catch(err => console.error("Error joining task group: ", err));
            })
            .catch(err => {
                console.error('SignalR connection error: ', err);
                alert('Failed to connect to SignalR hub');
            });

        // Receive driver's location updates from SignalR
        connection.on("ReceiveDriverLocation", (location) => {
            const { Latitude, Longitude } = location;
            console.log('Received driver location from SignalR:', Latitude, Longitude);

            if (!driverMarker) {
                driverMarker = new google.maps.Marker({
                    position: { lat: Latitude, lng: Longitude },
                    map: map,
                    title: 'Driver Location',
                    icon: {
                        url: 'https://cdn-icons-png.flaticon.com/512/1048/1048312.png',
                        scaledSize: new google.maps.Size(30, 50)
                    }
                });
            } else {
                driverMarker.setPosition({ lat: Latitude, lng: Longitude });
            }

            map.setCenter({ lat: Latitude, lng: Longitude }); // Update map to driver’s location
            if (clientMarker) {
                displayRoute(driverMarker.getPosition(), clientMarker.getPosition());
            }
        });

        // Get current location using Geolocation API
        function getLocationAndSend() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;
                    console.log('Geolocation received:', latitude, longitude);

                    // Send location to SignalR
                    connection.invoke("UpdateDriverLocation", taskId, latitude, longitude)
                        .catch(err => console.error("Error sending location to server: ", err));

                    if (!driverMarker) {
                        map.setCenter({ lat: latitude, lng: longitude });
                        driverMarker = new google.maps.Marker({
                            position: { lat: latitude, lng: longitude },
                            map: map,
                            title: 'Driver Location',
                            icon: {
                                url: 'https://cdn-icons-png.flaticon.com/512/1048/1048312.png',
                                scaledSize: new google.maps.Size(30, 50)
                            }
                        });
                    } else {
                        driverMarker.setPosition({ lat: latitude, lng: longitude });
                    }

                    // Set client location if not already set
                    if (!clientMarker) {
                        clientMarker = new google.maps.Marker({
                            position: { lat: 52.52, lng: 13.4050 }, // Set this to the task's client location
                            map: map,
                            title: 'Client Location',
                            icon: {
                                url: 'https://cdn-icons-png.flaticon.com/512/1048/1048323.png',
                                scaledSize: new google.maps.Size(30, 50)
                            }
                        });
                    }
                    // Display route from driver to client
                    displayRoute(driverMarker.getPosition(), clientMarker.getPosition());
                }, function (error) {
                    console.error("Error getting geolocation: ", error);
                    alert("Failed to get your current location. Please ensure location services are enabled.");
                });
            } else {
                console.error("Geolocation is not supported by this browser.");
                alert("Geolocation is not supported by this browser.");
            }
        }

        // Function to display directions between driver and client
        function displayRoute(driverLocation, clientLocation) {
            directionsService.route({
                origin: driverLocation,
                destination: clientLocation,
                travelMode: google.maps.TravelMode.DRIVING // You can change this to WALKING or BICYCLING
            }, function (response, status) {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsRenderer.setDirections(response);
                } else {
                    alert('Directions request failed due to ' + status);
                }
            });
        }

        // Get location every 5 seconds
        setInterval(getLocationAndSend, 5000); // Update every 5 seconds

        // Show Stop Tracking button
        document.getElementById("stopTracking").style.display = "inline-block";

        // Stop tracking
        document.getElementById("stopTracking").addEventListener("click", async () => {
            try {
                await connection.invoke("LeaveTaskGroup", taskId); // Use taskId to leave the task group
                connection.stop();
                document.getElementById("stopTracking").style.display = "none";
                alert("Tracking stopped.");
            } catch (err) {
                console.error("Error leaving task group: ", err);
                alert("Error stopping tracking.");
            }
        });
    });
</script>

<!-- Styles for better appearance -->
<style>
    #map {
        height: 500px;
        width: 100%;
        border: 1px solid #ccc;
    }

    button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
    }

        button:hover {
            background-color: #45a049;
        }

    .btn-danger {
        background-color: #dc3545;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }
</style>

