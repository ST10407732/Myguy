@{
    ViewBag.Title = "Driver Task Tracking";
    var taskId = ViewBag.TaskId; // Get the taskId dynamically, passed from the controller
}

<div class="container mt-4">
    <h2 class="text-primary mb-4">@ViewBag.Title</h2>

    <!-- Error Messages -->
    <div id="errorContainer" class="alert alert-danger d-none" role="alert">
        <span id="errorMessage"></span>
    </div>

    <!-- Map Container -->
    <div id="map" style="height: 500px; width: 100%;"></div>

    <!-- Location Input Controls -->
    <div class="mt-4">
        <div class="form-group">
            <label for="pickupLocation">Pickup Location</label>
            <input type="text" class="form-control" id="pickupLocation" placeholder="Enter Pickup Location" />
        </div>
        <div class="form-group">
            <label for="dropoffLocation">Drop-off Location</label>
            <input type="text" class="form-control" id="dropoffLocation" placeholder="Enter Drop-off Location" />
        </div>
        <div class="form-group">
            <label for="stopLocation">Stop Location</label>
            <input type="text" class="form-control" id="stopLocation" placeholder="Enter Stop Location" />
        </div>
        <button class="btn btn-success" id="startNavigating">Start Navigating</button>
        <button class="btn btn-danger" id="stopTracking" style="display: none;">Stop Tracking</button>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBx_0EotM86ynL6i5HcHB6LsZOAWQIUpJM&libraries=places&callback=initMap" async defer></script>

<script>
    let map, directionsService, directionsRenderer, driverMarker;
    let taskId = @Html.Raw(Json.Serialize(ViewBag.TaskId));
    let pickupMarker, dropoffMarker, stopMarkers = [];

    document.addEventListener("DOMContentLoaded", function () {
        // Initialize Google Maps
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 0, lng: 0 }, // Initial center (it will change once driver's location is known)
            zoom: 13
        });

        // Initialize the Directions service and renderer
        directionsService = new google.maps.DirectionsService();
        directionsRenderer = new google.maps.DirectionsRenderer({ map: map });

        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/locationHub")
            .build();

        connection.start()
            .then(() => {
                console.log('SignalR connection established');
                connection.invoke("JoinTaskGroup", taskId) // Join the task group for this specific task
                    .catch(err => console.error("Error joining task group: ", err));
            })
            .catch(err => {
                console.error('SignalR connection error: ', err);
                alert('Failed to connect to SignalR hub');
            });

        // Receive driver's location updates from SignalR
        connection.on("ReceiveDriverLocation", (location) => {
            const { Latitude, Longitude } = location;
            console.log('Received driver location from SignalR:', Latitude, Longitude);

            if (!driverMarker) {
                driverMarker = new google.maps.Marker({
                    position: { lat: Latitude, lng: Longitude },
                    map: map,
                    title: 'Driver Location',
                    icon: {
                        url: 'https://cdn-icons-png.flaticon.com/512/1048/1048312.png',
                        scaledSize: new google.maps.Size(30, 50)
                    }
                });
            } else {
                driverMarker.setPosition({ lat: Latitude, lng: Longitude });
            }

            // Update the map's center to the driver's location
            map.setCenter({ lat: Latitude, lng: Longitude });
        });

        // Get current location using Geolocation API
        function getLocationAndSend() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    const latitude = position.coords.latitude;
                    const longitude = position.coords.longitude;
                    const accuracy = position.coords.accuracy; // The accuracy of the location in meters

                    console.log('Geolocation received:', latitude, longitude, 'Accuracy:', accuracy);

                    if (accuracy <= 50) {  // Only send location if accuracy is within 50 meters
                        // Send location to SignalR
                        connection.invoke("UpdateDriverLocation", taskId, latitude, longitude)
                            .catch(err => console.error("Error sending location to server: ", err));

                        if (!driverMarker) {
                            map.setCenter({ lat: latitude, lng: longitude });
                            driverMarker = new google.maps.Marker({
                                position: { lat: latitude, lng: longitude },
                                map: map,
                                title: 'Driver Location',
                                icon: {
                                    url: 'https://cdn-icons-png.flaticon.com/512/1048/1048312.png',
                                    scaledSize: new google.maps.Size(30, 50)
                                }
                            });
                        } else {
                            driverMarker.setPosition({ lat: latitude, lng: longitude });
                        }
                    } else {
                        console.warn("Location accuracy is low, retrying...");
                    }
                }, function (error) {
                    console.error("Error getting geolocation: ", error);
                    alert("Failed to get your current location. Please ensure location services are enabled.");
                }, { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 });
            } else {
                console.error("Geolocation is not supported by this browser.");
                alert("Geolocation is not supported by this browser.");
            }
        }

        // Initialize Places Autocomplete for location input fields
        const pickupInput = document.getElementById("pickupLocation");
        const dropoffInput = document.getElementById("dropoffLocation");
        const stopInput = document.getElementById("stopLocation");

        new google.maps.places.Autocomplete(pickupInput);
        new google.maps.places.Autocomplete(dropoffInput);
        new google.maps.places.Autocomplete(stopInput);

        // Start navigating to the entered locations
        document.getElementById("startNavigating").addEventListener("click", function () {
            const pickupLocation = document.getElementById("pickupLocation").value;
            const dropoffLocation = document.getElementById("dropoffLocation").value;
            const stopLocation = document.getElementById("stopLocation").value;

            // Validate the locations
            if (!pickupLocation || !dropoffLocation) {
                alert("Pickup and Drop-off locations are required!");
                return;
            }

            // Geocode the pickup location
            geocodeLocation(pickupLocation, function (pickupLatLng) {
                if (pickupMarker) {
                    pickupMarker.setPosition(pickupLatLng);
                } else {
                    pickupMarker = new google.maps.Marker({
                        position: pickupLatLng,
                        map: map,
                        title: 'Pickup Location',
                        icon: {
                            url: 'https://cdn-icons-png.flaticon.com/512/1048/1048323.png',
                            scaledSize: new google.maps.Size(30, 50)
                        }
                    });
                }

                // Geocode the drop-off location
                geocodeLocation(dropoffLocation, function (dropoffLatLng) {
                    if (dropoffMarker) {
                        dropoffMarker.setPosition(dropoffLatLng);
                    } else {
                        dropoffMarker = new google.maps.Marker({
                            position: dropoffLatLng,
                            map: map,
                            title: 'Drop-off Location',
                            icon: {
                                url: 'https://cdn-icons-png.flaticon.com/512/1048/1048323.png',
                                scaledSize: new google.maps.Size(30, 50)
                            }
                        });
                    }

                    // Optionally, geocode and add stop locations
                    if (stopLocation) {
                        geocodeLocation(stopLocation, function (stopLatLng) {
                            const stopMarker = new google.maps.Marker({
                                position: stopLatLng,
                                map: map,
                                title: 'Stop Location',
                                icon: {
                                    url: 'https://cdn-icons-png.flaticon.com/512/1048/1048323.png',
                                    scaledSize: new google.maps.Size(30, 50)
                                }
                            });
                            stopMarkers.push(stopMarker);
                        });
                    }

                    // Calculate and display the route from pickup to drop-off
                    displayRoute(pickupLatLng, dropoffLatLng);
                });
            });
        });

        // Function to geocode an address
        function geocodeLocation(address, callback) {
            const geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status === google.maps.GeocoderStatus.OK) {
                    callback(results[0].geometry.location);
                } else {
                    alert("Geocode failed for the address: " + address);
                }
            });
        }

        // Function to display directions
        function displayRoute(pickupLatLng, dropoffLatLng) {
            directionsService.route({
                origin: pickupLatLng,
                destination: dropoffLatLng,
                waypoints: stopMarkers.map(marker => ({ location: marker.getPosition(), stopover: true })),
                travelMode: google.maps.TravelMode.DRIVING
            }, function (response, status) {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsRenderer.setDirections(response);
                } else {
                    alert('Directions request failed due to ' + status);
                }
            });
        }

        // Show Stop Tracking button
        document.getElementById("stopTracking").style.display = "inline-block";

        // Stop Tracking button functionality
        document.getElementById("stopTracking").addEventListener("click", function () {
            connection.invoke("LeaveTaskGroup", taskId)
                .catch(err => console.error("Error leaving task group: ", err));
            location.reload(); // Refresh the page to reset everything
        });

        // Start getting the location periodically
        setInterval(getLocationAndSend, 5000); // Send location every 5 seconds
    });
</script>
