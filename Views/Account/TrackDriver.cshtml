@model MYGUYY.Models.TaskRequest
@{
    ViewData["Title"] = "Track Driver Location";
}

<h2>Track Driver Location</h2>

<div class="container mt-4">
    <!-- Map Container -->
    <div id="map" style="height: 500px; width: 100%; position: relative;">
        <!-- Loading Spinner (Overlay) -->
        <div id="loadingSpinner" class="loading-spinner" style="display: none;"></div>

        <!-- Progress Bar (Overlay) -->
        <div class="progress" style="display: none; position: absolute; top: 10px; left: 50%; transform: translateX(-50%); width: 80%; z-index: 999;">
            <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
    </div>

    <!-- Tracking Controls -->
    <div class="mt-4">
        <button class="btn btn-danger" id="stopTracking" style="display: none;">Stop Tracking</button>
    </div>

    <!-- Error Message -->
    <div id="errorMessage" style="display: none; color: red;">
        <p>Driver can't be tracked. Please try again later.</p>
    </div>
</div>

<!-- External Libraries -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
<script src="https://cdn.jsdelivr.net/npm/spin.js@2.0.2/spin.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Ensure taskId is passed correctly to the JavaScript variable
        const taskId = @Html.Raw(Json.Serialize(Model.Id));

        // Initialize the map with a default center (e.g., 52.52, 13.4050 for Berlin)
        const map = L.map('map').setView([52.52, 13.4050], 13); // Default view (Berlin)

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        let driverMarker = null; // Marker for the driver location
        let trackingTimeout = null; // Timeout variable for error handling

        // Initialize the Spin.js spinner options
        var spinnerOpts = {
            lines: 13,
            length: 28,
            width: 14,
            radius: 42,
            scale: 0.5,
            corners: 1,
            color: '#3498db',
            opacity: 0.25,
            rotate: 0,
            direction: 1,
            speed: 1,
            trail: 60,
            fps: 20,
            zIndex: 2e9,
            className: 'spinner',
            top: '50%',
            left: '50%',
            position: 'absolute'
        };

        // Create the spinner
        var spinner = new Spinner(spinnerOpts).spin(document.getElementById('loadingSpinner'));

        // Show loading spinner and progress bar while waiting for updates
        function showLoading() {
            document.getElementById("loadingSpinner").style.display = "block";
            document.querySelector(".progress").style.display = "block";
        }

        // Hide loading spinner and progress bar
        function hideLoading() {
            clearTimeout(trackingTimeout);  // Clear the timeout if location is found
            document.getElementById("loadingSpinner").style.display = "none";
            document.querySelector(".progress").style.display = "none";
            document.getElementById("errorMessage").style.display = "none";
            spinner.stop(); // Stop the spinner when hiding
        }

        // Update progress bar
        function updateProgressBar(progress) {
            document.getElementById("progressBar").style.width = progress + "%";
        }

        // Set timeout to show error if location can't be fetched within 60 seconds
        trackingTimeout = setTimeout(function () {
            hideLoading();
            document.getElementById("errorMessage").style.display = "block";
        }, 60000);  // 60 seconds timeout

        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/locationHub")
            .build();

        // Log success or failure of the connection
        connection.start()
            .then(() => {
                console.log('SignalR connection established');
                connection.invoke("JoinTaskGroup", taskId)  // Join the group for this specific task
                    .catch(err => console.error("Error joining task group: ", err));
                updateProgressBar(50);  // Update progress bar to 50% while connecting
            })
            .catch(err => {
                console.error('SignalR connection error: ', err);
                alert('Failed to connect to SignalR hub');
                hideLoading();
            });

        // Start receiving location updates from SignalR
        connection.on("ReceiveDriverLocation", (location) => {
            const { Latitude, Longitude } = location;

            // Hide loading spinner and progress bar once we get the location
            hideLoading();

            // Update the driver marker or create a new one if it doesn't exist
            if (!driverMarker) {
                driverMarker = L.marker([Latitude, Longitude], {
                    icon: L.icon({
                        iconUrl: 'https://cdn-icons-png.flaticon.com/512/1048/1048312.png',
                        iconSize: [25, 40],
                        iconAnchor: [12, 40]
                    })
                }).addTo(map)
                    .bindPopup('Driver Location')
                    .openPopup();
            } else {
                // Move the existing driver marker to the new location
                driverMarker.setLatLng([Latitude, Longitude]);
            }

            // Update map view to the driver’s current location
            map.setView([Latitude, Longitude], 13); // Update map view to driver’s location
        });

        // Show Stop Tracking button
        document.getElementById("stopTracking").style.display = "inline-block";

        // Stop tracking
        document.getElementById("stopTracking").addEventListener("click", async () => {
            try {
                await connection.invoke("LeaveTaskGroup", taskId);  // Use taskId to leave the task group
                connection.stop();
                document.getElementById("stopTracking").style.display = "none";
                alert("Tracking stopped.");
            } catch (err) {
                console.error("Error leaving task group: ", err);
                alert("Error stopping tracking.");
            }
        });

        // Start loading spinner and progress bar while tracking
        showLoading();
    });
</script>

<!-- Styles for better appearance -->
<style>
    #map {
        height: 500px;
        width: 100%;
        border: 1px solid #ccc; /* Add a border to the map for clarity */
        position: relative; /* Ensure the overlay elements are positioned on top */
    }

    button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        border-radius: 5px;
    }

        button:hover {
            background-color: #45a049;
        }

    .btn-danger {
        background-color: #dc3545;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    /* Loading Spinner */
    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        text-align: center;
        padding: 20px;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
    }

    .tracking-text {
        font-size: 18px;
        font-weight: bold;
        color: #3498db;
    }

    /* Progress Bar */
    .progress {
        margin-top: 20px;
        height: 20px;
        position: absolute;
        top: 10px;
        left: 50%;
        transform: translateX(-50%);
        width: 80%;
        z-index: 999;
    }

    .progress-bar {
        background-color: #4caf50;
    }
</style>
