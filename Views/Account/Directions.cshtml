@model TaskRequest
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Driver Tracking</title>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBx_0EotM86ynL6i5HcHB6LsZOAWQIUpJM&libraries=places,directions&callback=initMap" async defer></script>
    <style>
        #map {
            height: 100vh;
            width: 100%;
        }

        #eta {
            font-size: 18px;
            margin-top: 10px;
            font-weight: bold;
        }
    </style>
</head>
<body>

    <
    <h2>Live Driver Tracking</h2>
    <div id="map"></div>
    <div id="eta">Calculating ETA...</div>

    <script>
        let map;
        let driverMarker;
        let directionsService;
        let directionsRenderer;
        let driverPath;
        let pickupReached = false;
        let dropoffReached = false;
        let lastUpdated = 0;
        const updateInterval = 2000;  // Update every 2 seconds
        let previousPosition = null;
        let previousTime = null;
        let lastRouteCalculated = 0;
        const routeRecalculationInterval = 60000;  // Recalculate route every 60 seconds
        const smoothFactor = 0.1;  // Smoothing factor for driver movement to avoid jitter
        const defaultLocation = { lat: -29.8587, lng: 31.0218 };  // Durban coordinates

        function initMap() {
            var pickupLat = @Model.PickupLatitude;
            var pickupLng = @Model.PickupLongitude;
            var dropoffLat = @Model.DropoffLatitude;
            var dropoffLng = @Model.DropoffLongitude;

            // Initialize map centered on Durban initially
            map = new google.maps.Map(document.getElementById("map"), {
                center: defaultLocation,  // Default to Durban if no location data is available
                zoom: 14,
            });

            // Add pickup and drop-off markers
            new google.maps.Marker({
                position: { lat: pickupLat, lng: pickupLng },
                map: map,
                title: "Pickup Location",
                icon: "https://maps.google.com/mapfiles/ms/icons/green-dot.png"
            });

            new google.maps.Marker({
                position: { lat: dropoffLat, lng: dropoffLng },
                map: map,
                title: "Dropoff Location",
                icon: "https://maps.google.com/mapfiles/ms/icons/red-dot.png"
            });

            // Setup Directions API
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({ suppressMarkers: true });
            directionsRenderer.setMap(map);

            // Initialize polyline to track driver movement
            driverPath = new google.maps.Polyline({
                path: [],
                geodesic: true,
                strokeColor: "#4285F4",
                strokeOpacity: 1.0,
                strokeWeight: 5
            });
            driverPath.setMap(map);

            // Start tracking the driver's location
            trackDriverLocation(pickupLat, pickupLng);
        }

        function trackDriverLocation(pickupLat, pickupLng) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    const driverLat = position.coords.latitude;
                    const driverLng = position.coords.longitude;
                    const accuracy = position.coords.accuracy;

                    // Check if the accuracy is good enough
                    if (accuracy <= 15000) { // 100 meters or less for reasonable accuracy
                        console.log("Initial position accuracy is good:", accuracy);
                        updateDriverLocation(driverLat, driverLng, pickupLat, pickupLng);

                        // Now start watching the position for continuous updates
                        navigator.geolocation.watchPosition(position => {
                            const driverLat = position.coords.latitude;
                            const driverLng = position.coords.longitude;
                            updateDriverLocation(driverLat, driverLng, pickupLat, pickupLng);
                        }, error => {
                            console.error("Location error:", error);
                        }, { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 });
                    } else {
                        console.error("GPS accuracy is poor. Accuracy:", accuracy);
                        alert("GPS accuracy is too low. Please move to an open area with better GPS reception.");
                    }
                }, error => {
                    console.error("Error retrieving location:", error);
                    alert("Unable to retrieve your location. Please check your location settings.");
                }, { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }

        function updateDriverLocation(lat, lng, pickupLat, pickupLng) {
            const now = Date.now();
            if (now - lastUpdated >= updateInterval) {
                lastUpdated = now;

                if (driverMarker) {
                    driverMarker.setPosition({ lat, lng });
                } else {
                    driverMarker = new google.maps.Marker({
                        position: { lat, lng },
                        map: map,
                        title: "Driver",
                        icon: "https://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                    });
                }

                driverPath.getPath().push(new google.maps.LatLng(lat, lng));
                map.setCenter({ lat: defaultLocation.lat, lng: defaultLocation.lng });  // Always center on Durban

                calculateRouteAndETA(lat, lng, pickupLat, pickupLng);
            }

            if (previousPosition) {
                const distance = google.maps.geometry.spherical.computeDistanceBetween(previousPosition, new google.maps.LatLng(lat, lng));
                const timeElapsed = (now - previousTime) / 1000;  // time in seconds
                const speed = distance / timeElapsed;  // speed in meters per second
                console.log(`Driver Speed: ${speed.toFixed(2)} m/s`);
            }
            previousPosition = new google.maps.LatLng(lat, lng);
            previousTime = now;
        }

        function calculateRouteAndETA(driverLat, driverLng, pickupLat, pickupLng) {
            const now = Date.now();
            if (now - lastRouteCalculated >= routeRecalculationInterval) {
                lastRouteCalculated = now;

                var driverLocation = new google.maps.LatLng(driverLat, driverLng);
                var pickupLocation = new google.maps.LatLng(pickupLat, pickupLng);
                var dropoffLocation = new google.maps.LatLng(@Model.DropoffLatitude, @Model.DropoffLongitude);

                let destination = pickupReached ? dropoffLocation : pickupLocation;

                var request = {
                    origin: driverLocation,
                    destination: destination,
                    travelMode: google.maps.TravelMode.DRIVING,
                    optimizeWaypoints: true,
                };

                directionsService.route(request, function (result, status) {
                    if (status === google.maps.DirectionsStatus.OK) {
                        directionsRenderer.setDirections(result);
                        displayETA(result);

                        // Check if driver reached pickup/drop-off
                        checkArrival(driverLat, driverLng, pickupLocation, dropoffLocation);
                    } else {
                        console.error("Directions request failed: " + status);
                        alert("Unable to calculate route. Please try again later.");
                    }
                });
            }
        }

        function displayETA(result) {
            let leg = result.routes[0].legs[0];
            document.getElementById("eta").innerText = `Estimated Time to Destination: ${leg.duration.text}`;
        }

        function checkArrival(driverLat, driverLng, pickupLocation, dropoffLocation) {
            const threshold = 0.001;  // Approx. 100 meters
            const buffer = 0.0001;    // Small buffer to avoid false positives in edge cases

            let driverPos = new google.maps.LatLng(driverLat, driverLng);

            if (!pickupReached) {
                let pickupDistance = google.maps.geometry.spherical.computeDistanceBetween(driverPos, pickupLocation);
                if (pickupDistance < threshold + buffer) {
                    pickupReached = true;
                    alert("Driver has reached the pickup location!");
                }
            }

            if (pickupReached && !dropoffReached) {
                let dropoffDistance = google.maps.geometry.spherical.computeDistanceBetween(driverPos, dropoffLocation);
                if (dropoffDistance < threshold + buffer) {
                    dropoffReached = true;
                    alert("Driver has reached the drop-off location!");
                }
            }
        }
    </script>


</body>
</html>

