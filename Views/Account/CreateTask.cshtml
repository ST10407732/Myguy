<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create New Task</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBx_0EotM86ynL6i5HcHB6LsZOAWQIUpJM&libraries=places,directions,geometry&callback=initMap" async defer></script>
    <script src="https://cdn.tailwindcss.com"></script>

</head>

@model TaskRequest
<y class="bg-gray-100">
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-4 h-screen">
        <!-- Form Section -->
        <div class="bg-white p-6 lg:col-span-1 overflow-y-auto">
            <h1 class="text-2xl font-bold text-green-600 mb-4">Create New Task</h1>

            <form id="taskForm" asp-action="CreateTask" method="post" onsubmit="return validateForm();">
                <div class="mb-4">
                    <label for="Description" class="block font-medium text-gray-700">Task Description</label>
                    <textarea asp-for="Description" id="Description" class="w-full border-gray-300 rounded-md p-2" required></textarea>
                </div>
                <div class="mb-4">
                    <label for="vehicleType" class="block font-medium text-gray-700">Select Vehicle Type</label>
                    <input type="hidden" id="VehicleTypeHidden" name="VehicleType" value="" />

                    <select asp-for="VehicleType" id="vehicleType" class="w-full border-gray-300 rounded-md p-2" required>
                        <option value="Bike">Bike</option>
                        <option value="Car">Car</option>
                        <option value="Van">Van</option>
                    </select>
                </div>

                <div class="mb-4">
                    <label for="PickupLocation" class="block font-medium text-gray-700">Pick-up Location</label>
                    <input id="PickupLocation" class="w-full border-gray-300 rounded-md p-2" type="text" placeholder="Enter pick-up location" required />
                    <input asp-for="PickupLatitude" id="PickupLatitude" type="hidden" />
                    <input asp-for="PickupLongitude" id="PickupLongitude" type="hidden" />
                </div>

                <div class="mb-4">
                    <label for="DropoffLocation" class="block font-medium text-gray-700">Drop-off Location</label>
                    <input id="DropoffLocation" class="w-full border-gray-300 rounded-md p-2" type="text" placeholder="Enter drop-off location" required />
                    <input asp-for="DropoffLatitude" id="DropoffLatitude" type="hidden" />
                    <input asp-for="DropoffLongitude" id="DropoffLongitude" type="hidden" />
                </div>

                <div class="mb-4">
                    <label for="Stops" class="block font-medium text-gray-700">Stops (Optional)</label>
                    <div id="stopsContainer" class="space-y-2"></div>
                    <button type="button" class="mt-2 bg-gray-500 text-white py-1 px-2 rounded hover:bg-gray-600" id="addStop">Add Stop</button>
                </div>



                <div class="mb-4">
                    <label for="recommendedCost" class="block font-medium text-gray-700">YOUR COST WILL APPEAR HERE...</label>
                    <input id="recommendedCost" class="w-full border-gray-300 rounded-md p-2" type="text" readonly />
                    <input type="hidden" id="RecommendedCost" name="RecommendedCost" />
                </div>

                <div class="mb-4">
                    <label asp-for="IsAgreementConfirmed" class="block font-medium text-gray-700">Agreement Confirmed</label>
                    <select asp-for="IsAgreementConfirmed" class="w-full border-gray-300 rounded-md p-2">
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                    </select>
                </div>

                <div class="flex space-x-2">
                    <button type="button" id="calculateCost" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600">Calculate Cost</button>
                    <button type="submit" class="bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700">Create Task</button>
                </div>
            </form>
        </div>

        <!-- Map Section -->
        <div id="map" class="lg:col-span-3 h-full relative">
            <!-- Spinner -->
            <div id="loadingSpinner" class="hidden absolute inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center">
                <div class="spinner-border animate-spin w-12 h-12 border-4 border-t-blue-500 rounded-full"></div>
            </div>
        </div>
    </div>
    <div id="map" class="lg:col-span-3 h-full relative">
        <!-- Spinner -->
        <div id="loadingSpinner" class="hidden absolute inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center">
            <div class="spinner-border animate-spin w-12 h-12 border-4 border-t-blue-500 rounded-full"></div>
        </div>
    </div>

    <!-- SignalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBx_0EotM86ynL6i5HcHB6LsZOAWQIUpJM&libraries=places,directions&callback=initMap" async defer></script>

    <script>
                document.getElementById('vehicleType').addEventListener('change', function () {
            document.getElementById('VehicleTypeHidden').value = this.value;
            updateCostAndDirections();
        });

        const rates = { bike: 10, car: 20, van: 30 };
        let map, directionsService, directionsRenderer, pickupMarker, dropoffMarker, stopMarkers = [];

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -25.746111, lng: 28.188056 },
                zoom: 12,
                disableDefaultUI: true,
                zoomControl: true,
                streetViewControl: false,
                mapTypeControl: false
            });

            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({ map: map });

            // Autocomplete setup for pickup and dropoff
            const pickupAutocomplete = new google.maps.places.Autocomplete(document.getElementById('PickupLocation'));
            const dropoffAutocomplete = new google.maps.places.Autocomplete(document.getElementById('DropoffLocation'));

            // Pickup marker setup
            pickupAutocomplete.addListener('place_changed', function () {
                const place = pickupAutocomplete.getPlace();
                if (place.geometry) {
                    if (pickupMarker) pickupMarker.setMap(null);
                    pickupMarker = new google.maps.Marker({
                        position: place.geometry.location,
                        map: map,
                        title: 'Pick-up Location'
                    });
                    document.getElementById('PickupLatitude').value = place.geometry.location.lat();
                    document.getElementById('PickupLongitude').value = place.geometry.location.lng();
                    map.setCenter(place.geometry.location);
                    updateCostAndDirections();
                }
            });

            // Dropoff marker setup
            dropoffAutocomplete.addListener('place_changed', function () {
                const place = dropoffAutocomplete.getPlace();
                if (place.geometry) {
                    if (dropoffMarker) dropoffMarker.setMap(null);
                    dropoffMarker = new google.maps.Marker({
                        position: place.geometry.location,
                        map: map,
                        title: 'Drop-off Location'
                    });
                    document.getElementById('DropoffLatitude').value = place.geometry.location.lat();
                    document.getElementById('DropoffLongitude').value = place.geometry.location.lng();
                    map.setCenter(place.geometry.location);
                    updateCostAndDirections();
                }
            });
        }

        // Add stop functionality
        document.getElementById('addStop').addEventListener('click', function () {
            const stopInput = document.createElement('input');
            stopInput.type = 'text';
            stopInput.className = 'form-control mt-2';
            stopInput.placeholder = 'Enter stop location';
            document.getElementById('stopsContainer').appendChild(stopInput);

            const stopAutocomplete = new google.maps.places.Autocomplete(stopInput);
            stopAutocomplete.addListener('place_changed', function () {
                const place = stopAutocomplete.getPlace();
                if (place.geometry) {
                    const stopMarker = new google.maps.Marker({
                        position: place.geometry.location,
                        map: map,
                        title: 'Stop Location'
                    });
                    stopMarkers.push(stopMarker);
                    updateCostAndDirections();
                }
            });
        });

        // Update cost and directions based on selected vehicle type and waypoints
        function updateCostAndDirections() {
            if (!pickupMarker || !dropoffMarker) return;

            const waypoints = stopMarkers.map(marker => marker.getPosition());
            let totalDistance = 0;
            const locations = [pickupMarker.getPosition(), ...waypoints, dropoffMarker.getPosition()];

            // Calculate total distance
            for (let i = 0; i < locations.length - 1; i++) {
                totalDistance += google.maps.geometry.spherical.computeDistanceBetween(locations[i], locations[i + 1]) / 1000; // KM
            }

            // Get the vehicle type value from the select dropdown
            const vehicleType = document.getElementById('vehicleType').value.toLowerCase();

            // Check if vehicleType is valid and present in rates
            if (!rates[vehicleType]) {
                alert("Please select a valid vehicle type.");
                return;
            }

            // Calculate the cost based on the selected vehicle type and distance
            const cost = totalDistance * rates[vehicleType];
            document.getElementById('recommendedCost').value = `R ${cost.toFixed(2)}`;
            document.getElementById('RecommendedCost').value = cost.toFixed(2);

            // Recalculate and render directions
            const waypointsData = stopMarkers.map(marker => ({ location: marker.getPosition(), stopover: true }));

            document.getElementById('loadingSpinner').classList.remove('hidden');
            directionsService.route({
                origin: pickupMarker.getPosition(),
                destination: dropoffMarker.getPosition(),
                waypoints: waypointsData,
                travelMode: google.maps.TravelMode.DRIVING
            }, function (response, status) {
                document.getElementById('loadingSpinner').classList.add('hidden');
                if (status === 'OK') {
                    directionsRenderer.setDirections(response);
                } else {
                    alert('Directions request failed: ' + status);
                }
            });
        }

        // Event listener for vehicle type change
        document.getElementById('vehicleType').addEventListener('change', function () {
            document.getElementById('VehicleTypeHidden').value = this.value;
            updateCostAndDirections();
        });

        // Form validation
        function validateForm() {
            if (!document.getElementById('PickupLocation').value || !document.getElementById('DropoffLocation').value) {
                alert("Please fill in all required fields.");
                return false;
            }
            return true;
        }

        window.initMap = initMap;
    </script>

</html>
